name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  contents: read
  packages: write
  security-events: write
  actions: read
  pull-requests: write

jobs:

  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: synth14/whoreapedwhat
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-release:
    runs-on: windows-latest
    needs: build-and-push  # optionnel, si tu veux que Ã§a attende le docker push
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup .NET (ou ton environnement de build)
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.x'  # adapte selon ton besoin

      - name: Build project
        run: dotnet publish -c Release -r win-x64 --self-contained true /p:PublishSingleFile=true /p:PublishTrimmed=true -o ./output

      - name: Upload release artifact
        uses: actions/upload-artifact@v3
        with:
          name: whoreapedwhat-win64
          path: ./output/whoreapedwhat.exe

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release asset
        uses: softprops/action-gh-release@v1
        with:
          files: ./output/whoreapedwhat.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
